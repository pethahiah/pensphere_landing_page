{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/emmanuelalabi/Desktop/peth/pensphere/src/utils/common.ts"],"sourcesContent":["import Decimal from \"decimal.js\";\n\nexport const scrollUp = () => {\n  window.scroll({ top: 0, behavior: 'smooth' });\n};\n\nexport const formateDateForReport = (date: string) => {\n  date = new Date(date).toISOString().replaceAll('Z', ' ').replaceAll('T', ' ').split('.')[0];\n  return date;\n}\n\nexport const sortDateHandler = (a, b) => {\n  return 1;\n}\n\nexport const shortenText = (text: string, by: number) => {\n  if (text?.length > by) {\n    return `${text.slice(0, by)}...`;\n  }\n  return text;\n}\n\nexport const paramBuilder = (url: string, params: Record<string, any>) => {\n  const urlObj = new URL(url);\n\n  Object.keys(params).forEach(key => {\n    if (params[key] !== undefined && params[key] !== null && params[key] !== \"\") {\n      urlObj.searchParams.append(key, params[key]);\n    }\n  });\n\n  return urlObj.toString();\n}\n\n\nexport const parseMoney = (\n  {\n    money,\n    onlyPositive = false\n  }:\n    {\n      money: string | number | null | undefined,\n      onlyPositive?: boolean\n    }\n): Decimal => {\n  // Return Decimal(0) for null, undefined, or empty string immediately\n  if (money === null || money === undefined || money === '') {\n    return new Decimal(0);\n  }\n\n  const moneyStr = money.toString();\n\n  // 1. Check for a negative sign *anywhere* in the original string.\n  //    (We assume any hyphen implies the number might be negative)\n  const isPotentiallyNegative = moneyStr.includes('-');\n\n  // 2. Remove everything except digits and the decimal point.\n  //    This extracts the core numeric parts, ignoring symbols, letters, commas, and hyphens.\n  let numericPart = moneyStr.replace(/[^0-9.]/g, '');\n\n  // 3. Validate the extracted numeric part.\n  //    - Check for multiple decimal points.\n  //    - Ensure it's not empty or just a single dot after cleaning.\n  const decimalParts = numericPart.split('.');\n  if (decimalParts.length > 2 || numericPart === '' || numericPart === '.') {\n    // If the structure is invalid (e.g., \"1.2.3\" -> \"123\", \"abc\" -> \"\", \"N.-\" -> \".\")\n    // or cleaning resulted in nothing usable, return 0.\n    if (numericPart !== '') { // Avoid logging for completely non-numeric input\n      console.warn(`Could not parse money value after cleaning: Original='${money}', Invalid Numeric Part='${numericPart}'`);\n    }\n    return new Decimal(0);\n  }\n\n  // if there is more than ond decima point take the first and ignore the rest\n  if (decimalParts.length > 1) {\n    numericPart = `${decimalParts[0]}.${decimalParts[1]}`;\n  } else {\n    numericPart = decimalParts[0]; // Only the whole number part\n  }\n\n  // 4. Construct the final string, adding the negative sign if detected earlier.\n  const finalNumericString = isPotentiallyNegative ? '-' + numericPart : numericPart;\n\n  // 5. Final validation: Ensure the reconstructed string is a valid number format.\n  //    This catches edge cases like if numericPart was empty and isNegative was true, resulting in \"-\".\n  const isValidFormat = /^-?\\d+(\\.\\d+)?$/.test(finalNumericString);\n  if (!isValidFormat) {\n    console.warn(`Could not parse money value after reconstruction: Original='${money}', Reconstructed='${finalNumericString}' (Invalid Format)`);\n    return new Decimal(0);\n  }\n\n  // 6. Parse the validated, reconstructed string.\n  try {\n    const amount = new Decimal(finalNumericString);\n\n    // Check for NaN (less likely now, but good practice)\n    if (amount.isNaN()) {\n      console.warn(`Parsed NaN from reconstructed value: Original='${money}', Reconstructed='${finalNumericString}'`);\n      return new Decimal(0);\n    }\n\n    // Apply absolute value if onlyPositive is true\n    return onlyPositive ? amount.abs() : amount;\n\n  } catch (error) {\n    console.error(\"Error parsing reconstructed money value with Decimal.js:\", `Original='${money}', Reconstructed='${finalNumericString}'`, error);\n    return new Decimal(0);\n  }\n};\n\n\nexport const formatCurrency = ({ num, currency = \"NGN\", withSymbol = true, locale = \"en-US\", currencyDisplay = 'narrowSymbol' }: { num: string | number | Decimal | null | undefined, currency?: string, withSymbol?: boolean, locale?: string, currencyDisplay?: 'narrowSymbol' | 'symbol' | 'code' | 'name' }): string | null => {\n  let numDecimal: Decimal;\n\n  if (num instanceof Decimal) {\n    numDecimal = num;\n  } else if (num === null || num === undefined || num === '') {\n    return null;\n  } else {\n    // parsing non-Decimal inputs using parseMoney for consistency\n    numDecimal = parseMoney({ money: num });\n  }\n\n  if (numDecimal.isNaN()) {\n    console.error(\"Invalid number resulting in NaN for formatCurrency:\", num);\n    return null;\n  }\n\n  try {\n    const numAsNumber = numDecimal.toNumber();\n\n    // Check for potential precision loss or range issues after toNumber()\n    if (!isFinite(numAsNumber)) {\n      console.error(\"Number exceeds limits for formatting:\", numDecimal.toString());\n      return \"Error: Number too large\";\n    }\n\n    const formatter = new Intl.NumberFormat(locale, {\n      style: 'currency',\n      currency,\n      currencyDisplay,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n    });\n\n    const res = formatter.format(numAsNumber);\n\n    if (!withSymbol) {\n      const parts = formatter.formatToParts(numAsNumber);\n      const value = parts.filter(part => part.type !== 'currency' && part.type !== 'literal').map(p => p.value).join('');\n      return value.trim();\n    }\n\n    return res;\n  } catch (error) {\n    console.error(\"Error formatting currency:\", numDecimal.toString(), error);\n    return \"Formatting Error\";\n  }\n};\n\n// i am using the decimal.js lib to add money to prvent floating point errors\nexport const addMoneyAmount = (amounts: Array<string | number | null | undefined>): Decimal => {\n  let total = new Decimal(0);\n\n  if (!Array.isArray(amounts)) {\n    console.error(\"Invalid input to addMoneyAmount: Expected an array.\");\n    return total;\n  }\n\n  for (const amount of amounts) {\n    // Use parseMoney to get a validated Decimal value (or Decimal(0) if invalid)\n    const decimalAmount = parseMoney({ money: amount });\n    total = total.plus(decimalAmount);\n  }\n\n  return total;\n};"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":["file:///Users/emmanuelalabi/Desktop/peth/pensphere/src/components/PhoneNumberInput.tsx"],"sourcesContent":["import { ChangeEvent } from \"react\";\nimport { icons } from \"../../src/assets/index\";\n\ntype IPhoneNumberInputProps = {\n  width?: string;\n  height?: string;\n  value: string\n  handleChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  required: boolean | undefined;\n  onBlur?: () => void;\n  name?: string;\n  min?: number;\n  pattern?: string;\n  readOnly?: boolean;\n  defaultValue?: string;\n  border?: string;\n}\n\nconst PhoneNumberInput = ({ width, height, value, handleChange, required, onBlur, name, min, pattern, defaultValue, readOnly, border }: IPhoneNumberInputProps) => {\n  return (\n    <label\n      className={`\n      w-${width ? width : \"full\"} \n      h-${height ? height : \"full\"}\n      ${border ? border : \"border-[#b4b4b5]\"}\n      border rounded-md flex items-center outline-[#0898A0] has-[:focus]:outline has-[:focus]:outline-2\n    `}>\n      <div className=\"min-w-fit max-w-[25%] px-1 border-r border-[#b4b4b5] flex justify-center items-center gap-1\">\n        <img src={icons.nigeriaFlag} className=\"h-[15px]\" alt=\"\" />\n        <span className=\"text-[12px] sm:text-[14px]\">+234</span>\n      </div>\n      <input\n        onChange={handleChange}\n        value={value}\n        type=\"tel\"\n        placeholder=\"8100000000\"\n        id=\"\"\n        className=\"h-[100%] px-2 w-full focus:!outline-none !m-0 !border-none\"\n        required={required}\n        onBlur={onBlur}\n        name={name}\n        min={min}\n        pattern={pattern}\n        defaultValue={defaultValue}\n        readOnly={readOnly}\n      />\n    </label>\n  )\n}\n\nexport default PhoneNumberInput;\n"],"names":[],"mappings":";;;;;AACA;;;AAiBA,MAAM,mBAAmB;QAAC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,EAA0B;IAC5J,qBACE,6LAAC;QACC,WAAW,AAAC,aAER,OADA,QAAQ,QAAQ,QAAO,eAEzB,OADE,SAAS,SAAS,QAAO,YACU,OAArC,SAAS,SAAS,oBAAmB;;0BAGvC,6LAAC;gBAAI,WAAU;;kCACb,6LAAC;wBAAI,KAAK,mIAAK,CAAC,WAAW;wBAAE,WAAU;wBAAW,KAAI;;;;;;kCACtD,6LAAC;wBAAK,WAAU;kCAA6B;;;;;;;;;;;;0BAE/C,6LAAC;gBACC,UAAU;gBACV,OAAO;gBACP,MAAK;gBACL,aAAY;gBACZ,IAAG;gBACH,WAAU;gBACV,UAAU;gBACV,QAAQ;gBACR,MAAM;gBACN,KAAK;gBACL,SAAS;gBACT,cAAc;gBACd,UAAU;;;;;;;;;;;;AAIlB;KA9BM;uCAgCS","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":["file:///Users/emmanuelalabi/Desktop/peth/pensphere/src/app/contact/ContactUsForm/index.tsx"],"sourcesContent":["import { FormEvent, useState } from \"react\";\nimport PhoneNumberInput from \"../../../components/PhoneNumberInput\";\nimport { icons } from \"../../../assets\";\n\nconst ContactUsNew = () => {\n    const [loading, setLoading] = useState(false);\n    const [data, setData] = useState({\n        firstname: '',\n        lastname: '',\n        phone: '',\n        email: '',\n        message: ''\n    });\n\n    const handleDataChange = (field: string, value: string) => {\n        return setData((prevState) => ({\n            ...prevState,\n            [field]: value\n        }));\n    }\n\n    const handleSubmit = (event: FormEvent) => {\n        event.preventDefault();\n        setLoading(true);\n        // submitInquiry({\n        //     first_name: data.firstname,\n        //     last_name: data.lastname,\n        //     issue: data.message,\n        //     phone_number: data.phone,\n        //     email: data.email\n        // }, () => {\n        //     setLoading(false);\n        //     setData({\n        //         firstname: '',\n        //         lastname: '',\n        //         phone: '',\n        //         email: '',\n        //         message: ''\n        //     })\n        // }, setLoading)\n    };\n\n    const contactType = [\n        {\n            icon: icons.emailIcon,\n            type: 'Email Address',\n            detail: 'Our team is ready to assist you.',\n            value: 'support@pethahiah.com',\n            link: 'mailto:support@pethahiah.com'\n        },\n        {\n            icon: icons.callIcon,\n            type: 'Phone Number',\n            detail: 'Our team is ready to assist you. Phone calls only.',\n            value: '+234-916-643-1626',\n            link: 'tel:2349166431626',\n            orValue: \"+2348093862639\",\n            orLink: \"tel:2348093862639\"\n        },\n        {\n            icon: icons.callIcon,\n            type: 'Office Address',\n            detail: 'You can visit our main office.',\n            value: `All Seasons Plaza, 24 Lateef  Jakande\n            road Agidingbi, Ikeja Lagos.`,\n            link: `https://www.google.com/maps/place/All+Season+Plaza/@6.6218558,3.3511803,17z/data=!3m1!4b1!4m6!3m5!1s0x103b93a6efc8020b:0xc54c73f5da9063e6!8m2!3d6.6218558!4d3.3537552!16s%2Fg%2F11hf06fczs?entry=ttu`\n        },\n        {\n            icon: icons.msgIcon,\n            type: 'Chat with us on WhatsApp',\n            detail: 'We are accessible at all times on WhatsApp',\n            value: 'Chat with us on +2349044556688',\n            link: 'https://wa.me/2349044556688?text=Hello%20Penshere%20'\n        }\n    ]\n    return (\n        <div className='flex flex-col-reverse md:flex-row w-screen min-h-screen h-fit' id=\"contact\">\n            <div className=\"flex flex-col p-[6%] justify-center items-start w-full md:w-6/12 \">\n                <p className=\"text-black w-fit text-left font-bold lg:text-4xl text-[26px] font-Onest rounded-md\">How can we help you?</p>\n                <p className=\"font-Onest my-10 text-left w-full md:w-[400px] text-black\">\n                    Seeking for the perfect service that aligns with your business needs?\n                    Just fill out the contact form, and our friendly support team will be in\n                    touch to assist you!\n                </p>\n                <div className=\"flex !w-full flex-row flex-wrap justify-between items-start\">\n                    {\n                        contactType.map((typ) => (\n                            <div key={typ.type} className=\" flex flex-col justify-between items-start my-5\">\n                                <img src={typ.icon} alt=\"\" className=\"my-2\" />\n                                <p className=\"text-base font-medium my-1\">{typ.type}</p>\n                                <p className=\"text-sm font-normal my-1\">{typ.detail}</p>\n                                <div className=\"flex flex-row gap-2\">\n                                    <a href={typ.link} className=\"text-sm font-normal underline text-[#0898A0] my-1 max-w-[250px] text-left cursor-pointer\">{typ.value}</a>\n                                    {\n                                        typ.orValue && (\n                                            <>\n                                            <span>or</span>\n                                            <a href={typ.orLink} className=\"text-sm font-normal underline text-[#0898A0] my-1 max-w-[250px] text-left cursor-pointer\">{typ.orValue}</a>\n                                            </>\n                                        )\n                                    }\n                                </div>\n                            </div>\n                        ))\n                    }\n                </div>\n            </div>\n            <form onSubmit={handleSubmit} className=\"flex flex-col p-[6%] justify-center items-start w-full md:w-6/12\">\n                <p className=\"font-Onest my-10 text-base text-left w-full\">\n                    Kindly fill out the form below, we will get back to your shortly\n                </p>\n                <div className=\"flex flex-row w-full justify-between my-2\">\n                    <div className=\"flex flex-col w-5/12\">\n                        <label htmlFor=\"\" className=\"font-Onest my-2 text-left\">Firstname</label>\n                        <input onChange={({ target }) => handleDataChange('firstname', target.value)} value={data.firstname} type=\"text\" name=\"\" placeholder=\"First name\" id=\"\" className=\"h-12 border rounded-md px-2 border-gray-[#DDDDDD]\" required />\n                    </div>\n                    <div className=\"flex flex-col w-5/12\">\n                        <label htmlFor=\"\" className=\"font-Onest my-2 text-left\">Lastname</label>\n                        <input onChange={({ target }) => handleDataChange('lastname', target.value)} value={data.lastname} type=\"text\" name=\"\" placeholder=\"First name\" id=\"\" className=\"h-12 border rounded-md px-2 border-gray-[#DDDDDD]\" required />\n                    </div>\n                </div>\n                <div className=\"flex flex-col w-full justify-between my-2\">\n                    <label htmlFor=\"\" className=\"font-Onest my-2 text-left\">Email</label>\n                    <input onChange={({ target }) => handleDataChange('email', target.value)} value={data.email} type=\"text\" placeholder=\"Email\" name=\"\" id=\"\" className=\"h-12 border rounded-md px-2 border-gray-[#DDDDDD]\" required />\n                </div>\n                <div className=\"flex flex-col w-full justify-between my-2\">\n                    <label htmlFor=\"\" className=\"font-Onest my-2 text-left\">Phone Number</label>\n                    {/* <input onChange={({ target }) => handleDataChange('phone', target.value)} value={data.phone} type=\"text\" placeholder=\"Phone Number\" name=\"\" id=\"\" className=\"h-12 border rounded-md px-2 border-gray-[#DDDDDD]\" required /> */}\n                    <PhoneNumberInput border=\"border-gray-[#DDDDDD]\" height={\"12\"} value={data.phone} required={true}\n                        handleChange={(e) => handleDataChange('phone', e.target.value)}\n                    />\n                </div>\n                <div className=\"flex flex-col w-full justify-between my-2\">\n                    <label htmlFor=\"\" className=\"font-Onest my-2 text-left\">How can we help?</label>\n                    <div className=\"border w-full border-width border-transparent rounded-md p-0 mb-0\">\n                        <textarea onChange={({ target }) => handleDataChange('message', target.value)} value={data.message} className=\"border w-full border-width border-gray-[#DDDDDD] h-24 rounded-md m-0 mb-0 resize-none p-4\" name=\"\" id=\"\" cols={30} rows={10} placeholder=\"Write your message here.....\" required></textarea>\n                    </div>\n                </div>\n                <button disabled={loading} className=\"border border-black bg-[#0898A0] text-white w-52 h-10 rounded font-medium text-base font-Onest mt-10 flex flex-row justify-around items-center\" type=\"submit\">{loading ? 'Loading' : 'Submit message'} <img src={icons.ArrowRightWhite} alt=\"\" /></button>\n            </form>\n        </div>\n    )\n};\n\nexport default ContactUsNew;\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 681, "column": 0}, "map": {"version":3,"sources":["file:///Users/emmanuelalabi/Desktop/peth/pensphere/src/app/contact/page.tsx"],"sourcesContent":["'use client'\nimport { useEffect } from 'react';\nimport { scrollUp } from '../../utils/common';\nimport ContactUsForm from './ContactUsForm';\nimport { heroImages } from '../../assets';\nimport { usePathname } from 'next/navigation';\n\nconst ContactUs = () => {\n  const pathname = usePathname();\n\n    useEffect(() => {\n        if (pathname) {\n            scrollUp();\n        }\n    }, [pathname]);\n    \n    return (\n        <div className='w-full'>\n            <div className='relative h-fit w-full'>\n                <img src={heroImages.contactLg} alt=\"\" className='w-full hidden lg:flex' />\n                <img src={heroImages.contactSm} alt=\"\" className='w-full lg:hidden flex' />\n                <h1 className='absolute lg:top-[50%] top-[10%] text-white text-3xl lg:text-[40px] lg:leading-[51px] font-medium lg:left-[6%] left-[25%]'>Contact us</h1>\n            </div>\n            <div>\n                <div></div>\n                <div>\n                    <ContactUsForm />\n                </div>\n            </div>\n        </div>\n    )\n};\n\nexport default ContactUs;\n"],"names":[],"mappings":";;;;;AACA;AACA;AACA;AACA;AACA;;;AALA;;;;;;AAOA,MAAM,YAAY;;IAChB,MAAM,WAAW,IAAA,oJAAW;IAE1B,IAAA,0KAAS;+BAAC;YACN,IAAI,UAAU;gBACV,IAAA,qIAAQ;YACZ;QACJ;8BAAG;QAAC;KAAS;IAEb,qBACI,6LAAC;QAAI,WAAU;;0BACX,6LAAC;gBAAI,WAAU;;kCACX,6LAAC;wBAAI,KAAK,wIAAU,CAAC,SAAS;wBAAE,KAAI;wBAAG,WAAU;;;;;;kCACjD,6LAAC;wBAAI,KAAK,wIAAU,CAAC,SAAS;wBAAE,KAAI;wBAAG,WAAU;;;;;;kCACjD,6LAAC;wBAAG,WAAU;kCAA2H;;;;;;;;;;;;0BAE7I,6LAAC;;kCACG,6LAAC;;;;;kCACD,6LAAC;kCACG,cAAA,6LAAC,8JAAa;;;;;;;;;;;;;;;;;;;;;;AAKlC;GAxBM;;QACa,oJAAW;;;KADxB;uCA0BS","debugId":null}},
    {"offset": {"line": 796, "column": 0}, "map": {"version":3,"sources":["file:///Users/emmanuelalabi/Desktop/peth/pensphere/node_modules/decimal.js/decimal.mjs"],"sourcesContent":["/*!\r\n *  decimal.js v10.6.0\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|bigint|Decimal}\r\n * max {number|string|bigint|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  // See https://github.com/MikeMcl/decimal.js/pull/217\r\n  x = new Ctor(1).minus(x).div(x.plus(1)).sqrt().atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|bigint|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, -1);\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 1);\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|bigint|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|bigint|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|bigint|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` (`n` is -1) and `min` (`n` is 1).\r\n */\r\nfunction maxOrMin(Ctor, args, n) {\r\n  var k, y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n\r\n    // NaN?\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    }\r\n\r\n    k = x.cmp(y);\r\n\r\n    if (k === n || k === 0 && x.s === n) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // TODO BigInt str: no need to check for decimal point, exponential form or leading zeros.\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|bigint|Decimal} The y-coordinate.\r\n * x {number|string|bigint|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * min {number|string|bigint|Decimal}\r\n * max {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|bigint|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // Infinity or NaN?\r\n      if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n    }\r\n\r\n    if (t === 'string') {\r\n      if ((i = v.charCodeAt(0)) === 45) {  // minus sign\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        if (i === 43) v = v.slice(1);  // plus sign\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    if (t === 'bigint') {\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n    }\r\n\r\n    throw Error(invalidArgument + v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|bigint|Decimal} The argument of the logarithm.\r\n * y {number|string|bigint|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, -1);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 1);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} The base.\r\n * y {number|string|bigint|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}}]
}